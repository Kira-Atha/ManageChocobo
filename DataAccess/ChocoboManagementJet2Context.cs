// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ChocoboManagement.Models;

#nullable disable

namespace ChocoboManagement.DataAccess
{
    public partial class ChocoboManagementJet2Context : DbContext
    {
        public ChocoboManagementJet2Context()
        {
        }

        public ChocoboManagementJet2Context(DbContextOptions<ChocoboManagementJet2Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Chocobo> Chocobos { get; set; }
        public virtual DbSet<Stable> Stables { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }
        public virtual DbSet<TrainerStable> TrainerStables { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=GAB;Initial Catalog=ChocoboManagement;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "French_CI_AS");

            modelBuilder.Entity<Chocobo>(entity =>
            {
                entity.ToTable("Chocobo");

                entity.Property(e => e.ChocoboName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Stable)
                    .WithMany(p => p.Chocobos)
                    .HasForeignKey(d => d.StableId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Chocobo_Stable");
            });

            modelBuilder.Entity<Stable>(entity =>
            {
                entity.ToTable("Stable");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.StableName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Trainer>(entity =>
            {
                entity.ToTable("Trainer");

                entity.Property(e => e.TrainerFirstname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrainerLastname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TrainerStable>(entity =>
            {
                entity.HasKey(e => new { e.TrainerId, e.StableId });

                entity.ToTable("TrainerStable");

                entity.HasOne(d => d.Stable)
                    .WithMany(p => p.TrainerStables)
                    .HasForeignKey(d => d.StableId)
                    .HasConstraintName("FK_TrainerStable_Stable");

                entity.HasOne(d => d.Trainer)
                    .WithMany(p => p.TrainerStables)
                    .HasForeignKey(d => d.TrainerId)
                    .HasConstraintName("FK_TrainerStable_Trainer");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}